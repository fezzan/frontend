{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from 'configs/AppConfig';\nimport history from '../history';\nimport { AUTH_TOKEN } from 'redux/constants/Auth';\nimport { message, notification } from 'antd';\nconst service = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}); // Config\n\nconst ENTRY_ROUTE = '/auth/login';\nconst TOKEN_PAYLOAD_KEY = 'authorization';\nconst PUBLIC_REQUEST_KEY = 'public-request'; // API Request interceptor\n\nservice.interceptors.request.use(config => {\n  const jwtToken = localStorage.getItem(AUTH_TOKEN); //debugger;\n\n  if (jwtToken) {\n    config.headers[\"Authorization\"] = `Bearer ${jwtToken}`;\n  }\n\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\n    history.push(ENTRY_ROUTE);\n    window.location.reload();\n  }\n\n  return config;\n}, error => {\n  // Do something with request error here\n  notification.error({\n    message: 'Error'\n  });\n  Promise.reject(error);\n}); // API respone interceptor\n\nservice.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  let notificationParam = {\n    message: ''\n  }; // Remove token and redirect \n\n  if (error.response.status === 403) {\n    notificationParam.message = 'Authentication Fail';\n    notificationParam.description = 'Please login again';\n    localStorage.removeItem(AUTH_TOKEN);\n    history.push(ENTRY_ROUTE);\n    window.location.reload();\n  }\n\n  if (error.response.status === 404) {\n    notificationParam.message = 'Not Found';\n  }\n\n  if (error.response.status === 500) {\n    notificationParam.message = 'Internal Server Error';\n  }\n\n  if (error.response.status === 508) {\n    notificationParam.message = 'Time Out';\n  }\n\n  message.error(error.response.data.message);\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"sources":["/Users/talhafiaz/Projects/React/Controrg/src/auth/FetchInterceptor.js"],"names":["axios","API_BASE_URL","history","AUTH_TOKEN","message","notification","service","create","baseURL","timeout","headers","ENTRY_ROUTE","TOKEN_PAYLOAD_KEY","PUBLIC_REQUEST_KEY","interceptors","request","use","config","jwtToken","localStorage","getItem","push","window","location","reload","error","Promise","reject","response","data","notificationParam","status","description","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,MAAtC;AAEA,MAAMC,OAAO,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEP,YADkB;AAE3BQ,EAAAA,OAAO,EAAE,KAFkB;AAG3BC,EAAAA,OAAO,EAAE;AAER,cAAU,kBAFF;AAGR,oBAAgB;AAHR;AAHkB,CAAb,CAAhB,C,CAUA;;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,iBAAiB,GAAG,eAA1B;AACA,MAAMC,kBAAkB,GAAG,gBAA3B,C,CAEA;;AACAP,OAAO,CAACQ,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiCC,MAAM,IAAI;AAC1C,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqBjB,UAArB,CAAjB,CAD0C,CAE1C;;AACC,MAAIe,QAAJ,EAAc;AACZD,IAAAA,MAAM,CAACP,OAAP,CAAe,eAAf,IAAmC,UAASQ,QAAS,EAArD;AACD;;AAED,MAAI,CAACA,QAAD,IAAa,CAACD,MAAM,CAACP,OAAP,CAAeG,kBAAf,CAAlB,EAAsD;AACtDX,IAAAA,OAAO,CAACmB,IAAR,CAAaV,WAAb;AACAW,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACC;;AAED,SAAOP,MAAP;AACD,CAbD,EAaGQ,KAAK,IAAI;AACX;AACApB,EAAAA,YAAY,CAACoB,KAAb,CAAmB;AAClBrB,IAAAA,OAAO,EAAE;AADS,GAAnB;AAGCsB,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACD,CAnBD,E,CAqBA;;AACAnB,OAAO,CAACQ,YAAR,CAAqBc,QAArB,CAA8BZ,GAA9B,CAAoCY,QAAD,IAAc;AAChD,SAAOA,QAAQ,CAACC,IAAhB;AACA,CAFD,EAEIJ,KAAD,IAAW;AAEb,MAAIK,iBAAiB,GAAG;AACvB1B,IAAAA,OAAO,EAAE;AADc,GAAxB,CAFa,CAMb;;AACA,MAAIqB,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AAClCD,IAAAA,iBAAiB,CAAC1B,OAAlB,GAA4B,qBAA5B;AACA0B,IAAAA,iBAAiB,CAACE,WAAlB,GAAgC,oBAAhC;AACAb,IAAAA,YAAY,CAACc,UAAb,CAAwB9B,UAAxB;AACAD,IAAAA,OAAO,CAACmB,IAAR,CAAaV,WAAb;AACAW,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA;;AAED,MAAIC,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AAClCD,IAAAA,iBAAiB,CAAC1B,OAAlB,GAA4B,WAA5B;AACA;;AAED,MAAIqB,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AAClCD,IAAAA,iBAAiB,CAAC1B,OAAlB,GAA4B,uBAA5B;AACA;;AAED,MAAIqB,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AAClCD,IAAAA,iBAAiB,CAAC1B,OAAlB,GAA4B,UAA5B;AACA;;AAEDA,EAAAA,OAAO,CAACqB,KAAR,CAAcA,KAAK,CAACG,QAAN,CAAeC,IAAf,CAAoBzB,OAAlC;AAEA,SAAOsB,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACA,CAhCD;AAkCA,eAAenB,OAAf","sourcesContent":["import axios from 'axios'\nimport { API_BASE_URL } from 'configs/AppConfig'\nimport history from '../history'\nimport { AUTH_TOKEN } from 'redux/constants/Auth'\nimport { message, notification } from 'antd';\n\nconst service = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000,\n  headers: {\n\t\n\t  'Accept': 'application/json',\n\t  'Content-Type': 'application/json'\n  }\n});\n\n// Config\nconst ENTRY_ROUTE = '/auth/login'\nconst TOKEN_PAYLOAD_KEY = 'authorization'\nconst PUBLIC_REQUEST_KEY = 'public-request'\n\n// API Request interceptor\nservice.interceptors.request.use(config => {\n\tconst jwtToken = localStorage.getItem(AUTH_TOKEN)\n\t//debugger;\n  if (jwtToken) {\n    config.headers[\"Authorization\"] = `Bearer ${jwtToken}`;\n  }\n\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\n\t\thistory.push(ENTRY_ROUTE)\n\t\twindow.location.reload();\n  }\n\n  return config\n}, error => {\n\t// Do something with request error here\n\tnotification.error({\n\t\tmessage: 'Error'\n\t})\n  Promise.reject(error)\n})\n\n// API respone interceptor\nservice.interceptors.response.use( (response) => {\n\treturn response.data\n}, (error) => {\n\n\tlet notificationParam = {\n\t\tmessage: ''\n\t}\n\t\n\t// Remove token and redirect \n\tif (error.response.status === 403) {\n\t\tnotificationParam.message = 'Authentication Fail'\n\t\tnotificationParam.description = 'Please login again'\n\t\tlocalStorage.removeItem(AUTH_TOKEN)\n\t\thistory.push(ENTRY_ROUTE)\n\t\twindow.location.reload();\n\t}\n\n\tif (error.response.status === 404) {\n\t\tnotificationParam.message = 'Not Found'\n\t}\n\n\tif (error.response.status === 500) {\n\t\tnotificationParam.message = 'Internal Server Error'\n\t}\n\t\n\tif (error.response.status === 508) {\n\t\tnotificationParam.message = 'Time Out'\n\t}\n\n\tmessage.error(error.response.data.message)\n\n\treturn Promise.reject(error);\n});\n\nexport default service"]},"metadata":{},"sourceType":"module"}