{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/talhafiaz/Projects/React/XOSportsFrontend/src/views/app-views/tournament/manage/answerquestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Table, Divider, Skeleton, Button, Radio, message } from \"antd\";\nimport { PoweroffOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport service from \"auth/FetchInterceptor\";\nimport { ROUND_END, ROUND_QUESTIONS } from \"configs/Endpoints\";\n\nconst Game = props => {\n  _s();\n\n  const history = useHistory();\n  const [questionList, setQuestionList] = useState([]);\n  const [loading, setloading] = useState(false);\n  const [data, setData] = useState([]);\n  const [val, setVal] = useState(null);\n  const columns = [{\n    title: \"Question ID\",\n    dataIndex: \"id\",\n    key: \"id\"\n  }, {\n    title: \"Question \",\n    dataIndex: \"text\",\n    key: \"gamename\",\n    render: text => /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/#\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }, this)\n  }, {\n    title: \"Answer \",\n    key: \"Answer\",\n    render: (text, record) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          //  justifyContent: \"flex-end\",\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(Radio.Group, {\n            buttonStyle: \"solid\",\n            children: [/*#__PURE__*/_jsxDEV(Radio.Button, {\n              onClick: () => setVal({\n                key: record.id,\n                val: 1\n              }),\n              value: \"1\",\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Radio.Button, {\n              onClick: () => setVal({\n                key: record.id,\n                val: 0\n              }),\n              value: \"0\",\n              children: \"O\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this);\n    }\n  }];\n  useEffect(() => {\n    if (val === null) return;\n    setData(old => {\n      let oldold = { ...old\n      };\n      oldold[val.key] = val.val;\n      return oldold;\n    });\n  }, [val]);\n\n  const endRound = () => {\n    let sendvalue = Object.keys(data).map(K => ({\n      id: K,\n      answer: data[K]\n    }));\n\n    if (sendvalue.length == questionList.length) {\n      setloading(true);\n      service.put(ROUND_END + props.match.params.id, sendvalue).then(data => {\n        if (data.success) {\n          // history.push(\n          //   \"/app/tournament/manage/\" + props.location.dataProps.tournamentid\n          // );\n          history.goBack();\n          message.success(\"Successfully Done :)\");\n        } else {\n          message.error(\"Failed\");\n        }\n      }).catch(e => {\n        message.error(\"Unable to load  ! Please check your internet or Server \");\n      }).finally(() => {\n        setloading(false);\n      });\n    } else {\n      message.error(\"Please Answer all questions\");\n    }\n  };\n\n  const fetchData = () => {\n    setloading(true);\n    service.get(ROUND_QUESTIONS + props.location.dataProps.rounddetails.id).then(response => {\n      setloading(false); //   console.log(response);\n\n      setQuestionList(response);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: 500,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Skeleton, {\n      active: true,\n      paragraph: {\n        rows: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: questionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      icon: /*#__PURE__*/_jsxDEV(PoweroffOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }, this),\n      loading: loading,\n      onClick: () => {\n        endRound();\n      },\n      children: \"Finish Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"5bqecN6B+8dWK+qh7TWeX5R2tak=\", false, function () {\n  return [useHistory];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/talhafiaz/Projects/React/XOSportsFrontend/src/views/app-views/tournament/manage/answerquestions.js"],"names":["React","useState","useEffect","Table","Divider","Skeleton","Button","Radio","message","PoweroffOutlined","Link","useHistory","service","ROUND_END","ROUND_QUESTIONS","Game","props","history","questionList","setQuestionList","loading","setloading","data","setData","val","setVal","columns","title","dataIndex","key","render","text","record","display","flexDirection","width","id","old","oldold","endRound","sendvalue","Object","keys","map","K","answer","length","put","match","params","then","success","goBack","error","catch","e","finally","fetchData","get","location","dataProps","rounddetails","response","minHeight","justifyContent","alignItems","rows"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Table, Divider, Skeleton, Button, Radio, message } from \"antd\";\nimport { PoweroffOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport service from \"auth/FetchInterceptor\";\nimport { ROUND_END, ROUND_QUESTIONS } from \"configs/Endpoints\";\n\nconst Game = (props) => {\n  const history = useHistory();\n\n  const [questionList, setQuestionList] = useState([]);\n  const [loading, setloading] = useState(false);\n  const [data, setData] = useState([]);\n  const [val, setVal] = useState(null);\n\n  const columns = [\n    {\n      title: \"Question ID\",\n      dataIndex: \"id\",\n      key: \"id\",\n    },\n\n    {\n      title: \"Question \",\n      dataIndex: \"text\",\n      key: \"gamename\",\n      render: (text) => <a href=\"/#\">{text}</a>,\n    },\n\n    {\n      title: \"Answer \",\n\n      key: \"Answer\",\n      render: (text, record) => {\n        return (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              //  justifyContent: \"flex-end\",\n              width: \"100%\",\n            }}\n          >\n            <span>\n              <Radio.Group buttonStyle=\"solid\">\n                <Radio.Button\n                  onClick={() => setVal({ key: record.id, val: 1 })}\n                  value=\"1\"\n                >\n                  X\n                </Radio.Button>\n                <Radio.Button\n                  onClick={() => setVal({ key: record.id, val: 0 })}\n                  value=\"0\"\n                >\n                  O\n                </Radio.Button>\n              </Radio.Group>\n            </span>\n          </div>\n        );\n      },\n    },\n  ];\n  useEffect(() => {\n    if (val === null) return;\n    setData((old) => {\n      let oldold = { ...old };\n      oldold[val.key] = val.val;\n      return oldold;\n    });\n  }, [val]);\n\n  const endRound = () => {\n    let sendvalue = Object.keys(data).map((K) => ({\n      id: K,\n      answer: data[K],\n    }));\n\n    if (sendvalue.length == questionList.length) {\n      setloading(true);\n      service\n        .put(\n          ROUND_END + props.match.params.id,\n          sendvalue\n        )\n        .then((data) => {\n          if (data.success) {\n            // history.push(\n            //   \"/app/tournament/manage/\" + props.location.dataProps.tournamentid\n            // );\n            history.goBack();\n            message.success(\"Successfully Done :)\");\n          } else {\n            message.error(\"Failed\");\n          }\n        })\n\n        .catch((e) => {\n          message.error(\n            \"Unable to load  ! Please check your internet or Server \"\n          );\n        })\n        .finally(() => {\n          setloading(false);\n        });\n    } else {\n      message.error(\"Please Answer all questions\");\n    }\n  };\n\n  const fetchData = () => {\n    setloading(true);\n\n    service\n      .get(\n        ROUND_QUESTIONS +\n          props.location.dataProps.rounddetails.id\n      )\n      .then((response) => {\n        setloading(false);\n        //   console.log(response);\n        setQuestionList(response);\n      });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  if (loading)\n    return (\n      <div\n        style={{\n          minHeight: 500,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Skeleton active paragraph={{ rows: 10 }} />\n      </div>\n    );\n  return (\n    <div>\n      <Table columns={columns} dataSource={questionList} />\n\n      <Button\n        type=\"primary\"\n        icon={<PoweroffOutlined />}\n        loading={loading}\n        onClick={() => {\n          endRound();\n        }}\n      >\n        Finish Round\n      </Button>\n    </div>\n  );\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}